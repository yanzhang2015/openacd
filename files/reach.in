#!/bin/sh
#
# reach       Init script for OpenUC Reach
#
# chkconfig: 345 97 15
# description: OpenUC Reach is a skills-based automated contact distribution \
#              system built on Erlang and FreeSWITCH
# processname: reach
# config: @reachetcdir@/sys.config
# config: @reachetcdir@/vm.args

set -o errexit
# set -o nounset

SCRIPT_DIR=$(dirname $0)
RELEASE_ROOT_DIR=$(cd $SCRIPT_DIR/.. && pwd)
REL_NAME=reach
REL_VSN=@REL_VSN@
ERTS_VSN=@ERTS_VSN@
REL_DIR=@reachlibdir@/releases/$REL_VSN
ERL_OPTS=
PIPE_DIR=@reachpipedir@

export HOME=${HOME:=@reachvardir@}
ROOTDIR=@reachlibdir@
ERTS_DIR=@reachlibdir@/erts-$ERTS_VSN

SCRIPT_PATH=$SCRIPT_DIR/$(basename "$0")
CONFIG_PATH=@reachetcdir@/sys.config
LOGCFG_PATH=@reachetcdir@/lager.config
VMARGS_PATH=@reachetcdir@/vm.args
MONGO_CONFIG_PATH=@reachmongocfg@

RUN_DIR=@reachrundir@
mkdir -p $RUN_DIR

RUNNER_LOG_DIR=@reachlogdir@
mkdir -p $RUNNER_LOG_DIR

checkstarted()
{
	# Make sure there is a node already running
	RES=$($NODETOOL ping) || true
	if [ "$RES" != "pong" ]; then
        echo "Node is not running!"
        exit 1
    fi
}

checknotstarted()
{
    # Make sure there is not already a node running
    RES=$($NODETOOL ping) || true
    if [ "$RES" = "pong" ]; then
       echo "Node is already running!"
       exit 1
    fi
}

reach_run()
{
    RUN_PARAM=$(printf "'%s' " "$@")
    HEART_COMMAND="$SCRIPT_PATH $HEART_OPTION $RUN_PARAM"
    export HEART_COMMAND
    mkdir -p $PIPE_DIR
    $BINDIR/run_erl -daemon $PIPE_DIR $RUNNER_LOG_DIR "exec $SCRIPT_PATH $START_OPTION $RUN_PARAM" 2>&1
    echo "reach started"
    sleep 3;
    fs_cli -x "reload mod_erlang_event";
}

start()
{
    checknotstarted

    START_OPTION="console"
    HEART_OPTION="start"
    reach_run "${@:2}"
}

start_boot()
{
    checknotstarted

    START_OPTION="console_boot"
    HEART_OPTION="start_boot"
    reach_run "${@:2}"
}

force_stop()
{	
    checkstarted

	echo "Wait for the node to stop..."

    case $(uname -s) in
        Linux|Darwin|FreeBSD|DragonFly|NetBSD|OpenBSD)
            # PID COMMAND
            PID=$(ps ax -o pid= -o command=|
                grep "$BINDIR/[b]eam"|awk '{print $1}')
            ;;
        SunOS)
            # PID COMMAND
            PID=$(ps -ef -o pid= -o args=|
                grep "$BINDIR/[b]eam"|awk '{print $1}')
            ;;
        CYGWIN*)
            # UID PID PPID TTY STIME COMMAND
            PID=$(ps -efW|grep "$BINDIR/[b]eam"|awk '{print $2}')
            ;;
    esac
    if [ "x$PID" != "x" ]; then
        $NODETOOL rpc cpx notice "Reach service script invoking 'nodetool stop'"

        if ! $NODETOOL stop; then
            echo "Warning: reach pid $PID is not reachable and cannot be stopped cleanly. Force stopping."
            kill -9 "$PID"
        fi

        while $(kill -0 $PID 2>/dev/null); do
            sleep 1
        done
    fi
}

# Extract the target node name from node.args
NAME_ARG=$(egrep '^-s?name' $VMARGS_PATH)
if [ -z "$NAME_ARG" ]; then
    echo "vm.args needs to have either -name or -sname parameter."
    exit 1
fi

# Extract the name type and name from the NAME_ARG for REMSH
REMSH_TYPE=$(echo $NAME_ARG | awk '{print $1}')
REMSH_NAME=$(echo $NAME_ARG | awk '{print $2}')
REMSH_NODE=$(echo $REMSH_NAME | awk -F@ '{print $2}')

if [ -z "$REMSH_NODE" ]; then
    if [ "$REMSH_TYPE" = "-sname" ]; then
        REMSH_NODE=$(hostname)
    else
        REMSH_NODE=$(hostname -f)
    fi
    REMSH_NAME="$REMSH_NAME@$REMSH_NODE"
fi

# Note the `date +%s`, used to allow multiple remsh to the same node transparently
REMSH_NAME_ARG="$REMSH_TYPE remsh`date +%s`@$REMSH_NODE"
REMSH_REMSH_ARG="-remsh $REMSH_NAME -boot start_clean"

# Extract the target cookie
COOKIE_ARG=$(grep '^-setcookie' $VMARGS_PATH)
if [ -z "$COOKIE_ARG" ]; then
    echo "vm.args needs to have a -setcookie parameter."
    exit 1
fi

DB_DIR=@reachdbdir@/$REMSH_NAME
mkdir -p $DB_DIR

export ROOTDIR
export BINDIR=$ERTS_DIR/bin
export EMU=beam
export PROGNAME=erl
export LD_LIBRARY_PATH=$ERTS_DIR/lib
export CONFIG_PATH
export LOGCFG_PATH
export MONGO_CONFIG_PATH

cd "$RUN_DIR"

# Setup remote shell command to control node
REMSH="$BINDIR/erl $REMSH_NAME_ARG $REMSH_REMSH_ARG $COOKIE_ARG"

# Setup command to control the node
NODETOOL="$BINDIR/escript $BINDIR/nodetool $NAME_ARG $COOKIE_ARG"

# Check the first argument for instructions
case "$1" in
    start)
        start "$@"
        ;;

    start_boot)
        start_boot "$@"
        ;;

    force-stop)
        # Wait for the node to completely stop...
        force_stop
        ;;

    restart)
        ## Restart the VM: stop + start
        force_stop
        start 
        ;;

    reboot)
        ## Restart the VM completely (uses heart to restart it)
        $NODETOOL rpc cpx notice "Reach service script invoking 'nodetool reboot'"
        exec $NODETOOL reboot
        ;;

    status)
        ## See if the VM is alive
        exec $NODETOOL ping
        ;;

    print-vqueues)
        ## See vqueue information
        $NODETOOL rpc cpx print_vqueues
        ;;

    stop)
        $NODETOOL rpc cpx graceful
        ;;

    set-ring-timeout)
        ## Set the default timeout when ringing an agent endpoint
        if [ -z "$2" ]; then
            echo "Missing argument"
            echo "Usage: $REL_NAME $1 {timeout in seconds}"
            exit 1
        fi

        exec $NODETOOL rpcterms cpx set_ring_timeout "$2".
        ;;

    attach)
        # Make sure a node IS running
        checkstarted

        shift
        exec $BINDIR/to_erl $PIPE_DIR
        ;;

    remote_console)
        checkstarted

        shift
        exec $REMSH
        ;;

    upgrade|downgrade|install)
        if [ -z "$2" ]; then
            echo "Missing package argument"
            echo "Usage: $REL_NAME $1 {package base name}"
            echo "NOTE {package base name} MUST NOT include the .tar.gz suffix"
            exit 1
        fi

        # Make sure a node IS running
        checkstarted

        node_name=`echo $NAME_ARG | awk '{print $2}'`
        erlang_cookie=`echo $COOKIE_ARG | awk '{print $2}'`

        exec $BINDIR/escript $BINDIR/install_upgrade.escript $REL_NAME $node_name $erlang_cookie $2
        ;;

    console|console_clean|console_boot)
        checknotstarted

        # .boot file typically just $REL_NAME (ie, the app name)
        # however, for debugging, sometimes start_clean.boot is useful.
        # For e.g. 'setup', one may even want to name another boot script.
        case "$1" in
            console)        [ -f $REL_DIR/$REL_NAME.boot ] && BOOTFILE=$REL_NAME || BOOTFILE=start ;;
            console_clean)  BOOTFILE=start_clean ;;
            console_boot)
                shift
                BOOTFILE="$1"
                shift
                ;;
        esac
        # Setup beam-required vars
        EMU=beam
        PROGNAME=$(echo $0 | sed 's/.*\///')
        CMD="$BINDIR/erlexec -boot $REL_DIR/$BOOTFILE \
            -mode embedded \
            -config $CONFIG_PATH \
            -mnesia dir \"$DB_DIR\"
            -args_file $VMARGS_PATH"
        export EMU
        export PROGNAME

        # Dump environment info for logging purposes
        echo "Exec: $CMD" -- ${1+"$@"}
        echo "Root: $ROOTDIR"

        # Log the startup
        logger -t "$REL_NAME[$$]" "Starting up"

        # Start the VM
        exec $CMD -- ${1+"$@"}
        ;;

    foreground)
        # start up the release in the foreground for use by runit
        # or other supervision services

        [ -f $REL_DIR/$REL_NAME.boot ] && BOOTFILE=$REL_NAME || BOOTFILE=start
        FOREGROUNDOPTIONS="-noinput +Bd"

        # Setup beam-required vars
        EMU=beam
        PROGNAME=$(echo $0 | sed 's/.*\///')
        CMD="$BINDIR/erlexec $FOREGROUNDOPTIONS -boot $REL_DIR/$BOOTFILE -config $CONFIG_PATH -args_file $VMARGS_PATH"
        export EMU
        export PROGNAME

        # Dump environment info for logging purposes
        echo "Exec: $CMD" -- ${1+"$@"}
        echo "Root: $ROOTDIR"

        # Start the VM
        exec $CMD -- ${1+"$@"}
        ;;
    *)
        echo "Usage: $REL_NAME {start|start_boot <file>|foreground|stop|force-stop|restart|reboot|status|console|console_clean|console_boot <file>|attach|remote_console|upgrade}"
        exit 1
        ;;
esac

exit 0
